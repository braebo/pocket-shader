---
import Importing from '../components/sections/Importing.svelte'
import Hero from '../components/Hero.svelte'
import Layout from '../layouts/Layout.astro'
import Code from '../components/Code.astro'

import MouseSmoothing from '../components/sections/MouseSmoothing.svelte'
import Playback from '../components/sections/Playback.svelte'
import Uniforms from '../components/sections/Uniforms.svelte'
import Shaders from '../components/sections/Shaders.svelte'
import Speed from '../components/sections/Speed.svelte'
import Dpr from '../components/sections/Dpr.svelte'
---

<script>
	import { fadeText } from '../utils/animations.ts'
	import kirby from '../shaders/kirby.frag?raw'
	import { PocketShader } from 'pocket-shader'
	import { dedent } from '../utils/dedent.ts'

	let ps1: PocketShader | null = null
	document.querySelector('#run1')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			fadeText(target, 'Dispose')
			ps1 = new PocketShader()
		} else {
			target.classList.remove('active')
			ps1?.dispose()
			ps1 = null
			fadeText(target, 'Run')
		}
	})

	let ps2: PocketShader | null = null
	document.querySelector('#run2')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			fadeText(target, 'Dispose')
			ps2 = new PocketShader('#codeblock2')
		} else {
			target.classList.remove('active')
			ps2?.dispose()
			ps2 = null
			fadeText(target, 'Run')
		}
	})

	let ps3: PocketShader | null = null
	document.querySelector('#run3')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		target.classList.toggle('active')
		if (target.textContent === 'Run') {
			fadeText(target, 'Dispose')
			ps3 = new PocketShader('#codeblock3', {
				autoStart: true,
				fragment: `
                    uniform float u_time;
                    uniform vec2 u_resolution;

                    out vec4 fragColor;

                    void main() {
                        float d = distance(fragColor.xy, u_resolution.xy / 2.0);
                        float a = atan(fragColor.y - u_resolution.y / 2.0, fragColor.x - u_resolution.x / 2.0);
                        fragColor = vec4(
                            0.5 + 0.5 * cos(u_time + a) + 0.5 * sin(d / 10.0),
                            0.5 + 0.5 * sin(u_time + a) + 0.5 * cos(d / 10.0),
                            0.5 + 0.5 * cos(u_time + a) + 0.5 * cos(d / 10.0),
                            1.0
                        );
                    }
                `,
			})
		} else {
			fadeText(target, 'Run')
			ps3?.dispose()
			ps3 = null
		}
	})

	let ps4: PocketShader | null = null
	document.querySelector('#run4')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		target.classList.toggle('active')
		if (target.textContent === 'Run') {
			if (ps4?.state !== 'disposed') {
				fadeText(target, 'Dispose')
				ps4 ||= new PocketShader('#codeblock3-4', {
					autoStart: true,
					fragment: dedent(`
                    uniform float u_time;
                    uniform vec2 u_mouse;
                    uniform vec2 u_resolution;
                    in vec2 vUv;
                    out vec4 color;
                    void main() {
                      vec2 p = vUv - 0.5;
                      vec2 m = u_mouse - 0.5;
                      float angle = atan(p.y, p.x) - atan(m.y, m.x);
                      color = vec4(0.5 + 0.5 * cos(angle), m.x + 0.5, m.y + 0.5, 1.0);
                    }
                `),
				})
			}
		} else {
			fadeText(target, 'Run')
			ps4?.dispose()
			ps4 = null
		}
	})

	let ps5: PocketShader | null = null
	document.querySelector('#run5')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			fadeText(target, 'Dispose')
			ps5 = new PocketShader('#codeblock5', {
				speed: 2,
				autoStart: true,
			})
		} else {
			target.classList.remove('active')
			ps5?.dispose()
			ps5 = null
			target.textContent = 'Run'
		}
	})

	let ps10: PocketShader | null = null
	document.querySelector('#run11')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			fadeText(target, 'Dispose')
			ps10 = new PocketShader('#codeblock11', {
				speed: 2,
				autoStart: true,
				uniforms: {
					u_jump: { type: 'float', value: 0 },
				},
				fragment: kirby,
			})

			ps10.on('render', ({ time }) => {
				if (ps10 && ps10.state !== 'disposed') {
					ps10.uniforms.u_jump.value = Math.sin(time * 2) / 5
				}
			})
		} else {
			target.classList.remove('active')
			ps10?.dispose()
			ps10 = null
			target.textContent = 'Run'
		}
	})
</script>

<Layout>
	<div class="page">
		<main>
			<br />

			<Hero client:load />
		</main>

		<h2 id="usage">Usage</h2>

		<section>
			<h3 id="fullscreen"><a href="/#fullscreen">Fullscreen</a></h3>
			<p>
				By default, the <code class="g-red">PocketShader</code> class creates a canvas and appends
				it to the
				<code>body</code> with css <code>position: fixed</code>.
			</p>

			<Code
				id="ps1"
				code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader()
            `}
			/>

			<button class="btn" id="run1">Run</button>
		</section>

		<section>
			<h3 id="sizing"><a href="/#sizing">Sizing</a></h3>
			<p>To use a specific container, pass an element or selector as the first argument.</p>

			<Code
				id="codeblock2"
				code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader('#codeblock2')
            `}
			/>

			<p>
				The canvas will always grow to fill its container, remaining responsive and resizing
				automatically.
			</p>

			<button class="btn" id="run2">Run</button>
		</section>

		<section>
			<h3 id="shaders"><a href="/#shaders">Shaders</a></h3>
			<p>
				Shaders can be passed into the <code>fragment</code> and/or
				<code>vertex</code> options.
			</p>

			<Shaders id="#codeblock3-3" client:load>
				<Code
					id="codeblock3-3"
					slot="default"
					code={/*ts*/ `import { PocketShader } from 'pocket-shader'

                  const ps = new PocketShader('#codeblock3', { // [!code highlight]
                    fragment: ${'`'} // [!code highlight]
                      uniform float u_time;
                      uniform vec2 u_mouse;

                      in vec2 vUv;
                      out vec4 color;

                      void main() {
                        vec2 p = vUv - 0.5, m = u_mouse - 0.5;
                        float a = atan(p.y, p.x) - atan(m.y, m.x);
                        float c = 0.5 + 0.5 * cos(a);
                        color = vec4(c, m.x + 0.5 * c, m.y + 0.5 * c, 1.0);
                      }
                    ${'`'} // [!code highlight]
                  })
                `}
				/>
			</Shaders>
		</section>

		<section>
			<p>The default <code>vertex</code> and <code>fragment</code> shaders:</p>

			<br />

			<Code
				id="default-vert"
				width="480px"
				title="default.vert"
				lang="glsl"
				code={/*glsl*/ `in vec4 a_position;
                    out vec2 vUv;
                    
                    void main() {
                        vUv = a_position.xy;
                        gl_Position = a_position;
                    }
				`}
			/>

			<Code
				id="default-frag"
				title="default.frag"
				lang="glsl"
				code={/*glsl*/ `#version 300 es
                precision mediump float;

                in vec2 vUv;
                out vec4 color;

                uniform float u_time;

                void main() {
                    color = vec4(vUv, 0.5 + 0.5 * sin(u_time), 1.0);
                }`}
			/>

			<p>
				<em>note:</em>
				<code>#version</code> and <code>precision</code> are automatically injected
				<em>(if missing)</em>.
			</p>
		</section>

		<section>
			<h3 id="raw-imports"><a href="/#raw-imports">Raw Imports</a></h3>
			<p>
				Bundlers like <code>vite</code> make it easy to import your shaders directly from
				<code>.glsl</code> files.
			</p>
			<Importing client:load id="#codeblock4">
				<Code
					slot="default"
					id="codeblock4"
					code={/*glsl*/ `
                    import { PocketShader } from 'pocket-shader'
                    import myShader from './clouds.glsl?raw' // [!code highlight]

                    new PocketShader('#codeblock4', {
                        autoStart: true,
                        fragment: myShader // [!code highlight]
                    })
                `}
				/>
			</Importing>
		</section>

		<h2 id="animation">Animation</h2>

		<section>
			<h3 id="render-loop"><a href="/#render-loop">Render Loop</a></h3>

			<p>
				The <code>autoStart</code> option will start a render loop as soon as the canvas has
				been appended to its container.
			</p>

			<Code
				id="codeblock5"
				code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader('#codeblock5', {
                    autoStart: true // [!code highlight]
                })
            `}
			/>

			<button class="btn" id="run5">Run</button>
		</section>

		<section>
			<p>
				The <code>on</code> method allows you to listen for the <code>'render'</code> event,
				which fires before each frame.
			</p>

			<Code
				id="codeblock11"
				fontSize="0.75rem"
				code={/*js*/ `
                import { PocketShader } from 'pocket-shader'
                import fragment from './kirby.frag?raw'

                const ps = new PocketShader('#codeblock11', {
                    fragment,
                    autoStart: true,
                    uniforms: { // [!code highlight]
                        u_jump: { type: 'float', value: 0 } // [!code highlight]
                    }, // [!code highlight]
                })

                ps.on('render', ({ time }) => { // [!code highlight]
                    ps.uniforms.u_jump.value = Math.sin(time) // [!code highlight]
                }) // [!code highlight]
            `}
			/>

			<button class="btn" id="run11">Run</button>
		</section>

		<section>
			<h3 id="playback-controls"><a href="/#playback-controls">Playback Controls</a></h3>
			<p>
				The animation loop can be controlled with methods like <code
					>start<span class="grey">()</span></code
				>
				and <code>stop<span class="grey">()</span></code>.
			</p>
			<Playback client:load id="#codeblock6">
				<Code
					slot="default"
					id="codeblock6"
					code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                const ps = new PocketShader('#codeblock6')
              
                ps.start() // [!code highlight]
            `}
				/>
			</Playback>
		</section>

		<section>
			<p>
				The <code>speed</code> can be passed as an option, or adjusted freely on each instance.
			</p>

			<Speed speed={2} id="#codeblock7" client:idle>
				<Code
					id="codeblock7"
					slot="code"
					code={/*js*/ `
                    import { PocketShader } from 'pocket-shader'

                    new PocketShader('#codeblock7', {
                        autoStart: true,
                        speed: 2 // [!code highlight]
                    })
                `}
				/>
			</Speed>
		</section>

		<section>
			<h3 id="max-pixel-ratio"><a href="/#max-pixel-ratio">Max Pixel Ratio</a></h3>

			<p>
				The <code>maxPixelRatio</code> will limit the pixel ratio of the canvas, which is determined
				by the device's pixel ratio by default.
			</p>

			<p>
				Lowering this can increse performance significantly depending on the size of the
				canvas / DPI of the screen.
			</p>

			<Dpr dpr={0.1} id="#codeblock8" client:idle>
				<Code
					id="codeblock8"
					slot="default"
					code={/*js*/ `
                    import myShader from './dyingUniverse.glsl?raw'
                    import { PocketShader } from 'pocket-shader'

                    new PocketShader('#codeblock8', {
                        fragment: myShader,
                        maxPixelRatio: 2 // [!code highlight]
                        autoStart: true,
                    })
                `}
				/>
			</Dpr>
		</section>

		<h2 id="uniforms">Uniforms</h2>

		<section>
			<h3 id="built-in-uniforms"><a href="/#built-in-uniforms">Built-in Uniforms</a></h3>
			<p>The following built-in uniforms are always available:</p>

			<Code
				id="uniforms"
				lang="glsl"
				code={/*glsl*/ `
                    uniform vec2  u_resolution;
                    uniform float u_time;
                    uniform vec2  u_mouse;
                    
                    in vec2 vUv;
                `}
			/>

			<br />

			<div style="text-align:center;margin-bottom:-1rem;"><code>u_resolution</code></div>
			<p style="max-width: 30rem;margin-bottom:1rem;">
				The canvas resolution is determined by the container size and the
				<code><a href="#max-pixel-ratio">maxPixelRatio</a></code>.
			</p>

			<div style="text-align:center;margin-bottom:-1rem;"><code>u_time</code></div>
			<p style="max-width: 30rem;margin-bottom:1rem;">
				The time in seconds since the shader started. This can be controlled directly with
				<code><span class="g-red">ps</span>.time</code>. See
				<a href="#playback-controls">Playback Controls</a>.
			</p>

			<div style="text-align:center;margin-bottom:-1rem;"><code>u_mouse</code></div>
			<p style="max-width: 30rem;margin-bottom:1rem;">
				The mouse position, normalized to <code>vec2(0-1)</code>. See
				<a href="#mouse-position">Mouse Position</a>.
			</p>
		</section>

		<section>
			<h3 id="custom-uniforms"><a href="/#custom-uniforms">Custom Uniforms</a></h3>

			<p>
				The <code>uniforms</code> option accepts custom uniforms.
			</p>

			<p>
				They can be accessed anytime with
				<code><span class="g-red">ps</span>.uniforms</code> and will auto-update in the shader
				when changed.
			</p>
			<Uniforms id="#codeblock9" client:idle>
				<Code
					id="codeblock9"
					slot="default"
					code={/*js*/ `
                    import { PocketShader } from 'pocket-shader'
                    import myShader from './clouds.glsl?raw'

                    const ps = new PocketShader('#codeblock9', {
                        fragment: myShader,
                        autoStart: true,
                        uniforms: { // [!code highlight]
                            octave: { type: 'int',   value: 3 }, // [!code highlight]
                            zoom:   { type: 'float', value: 0 }, // [!code highlight]
                            sphere: { type: 'float', value: 1 }, // [!code highlight]
                            // etc... // [!code highlight]
                        } // [!code highlight]
                    })

                    // Update them later // [!code highlight]
                    ps.uniforms.octave.value = 4 // [!code highlight]
                    ps.uniforms.zoom.value = 1 // [!code highlight]
                `}
				/>
			</Uniforms>

			<br />

			<p class="note" style="text-wrap: pretty">
				For now, <code>uniforms</code> must be <code>&#123;type,value&#125;</code> objects.&nbsp;&nbsp;In
				the future, it will accept primitive values and infer the <code>type</code> internally.
				<br /><em>(just ran out of time for now...)</em>
			</p>
		</section>

		<section>
			<h3 id="mouse-position"><a href="/#mouse-position">Mouse Position</a></h3>
			<p>
				The mouse position is available in the uniform <code>u_mouse</code>.
			</p>

			<p>
				The position is normalized to <code>vec2(0-1)</code>, where <code>[0, 0]</code> is the
				bottom left corner of the canvas <em>(bottom is 0 in GLSL)</em>.
			</p>

			<Code
				id="mousePosition"
				slot="code"
				code={`const ps = new PocketShader({ // [!code highlight]
                  fragment: ${'`'} // [!code highlight]
                  // [!code word:u_resolution:1]
                    uniform vec2 u_resolution; // [!code highlight]
                    // [!code word:u_mouse:1]
                    uniform vec2 u_mouse; // [!code highlight]

                    in vec2 vUv;
                    out vec4 color;

                    void main() {
                      vec2 uv = vUv * u_resolution;
                      float size = u_resolution.x * 0.05;

                      // [!code word:mousePos:1]
                      vec2 mousePos = u_mouse * u_resolution; // [!code highlight]

                      float dist = length(uv - mousePos);
                      float circle = smoothstep(size, size - 0.1, dist);
                      float glowEffect = exp(-dist * 0.1);

                      color = vec4(vec3(circle * glowEffect), 1.0);
                    }
                  ${'`'}, // [!code highlight]
                }) // [!code highlight]
            `}
			/>

			<p>
				It can be manually updated on the instance with <code
					><span class="g-red">ps</span>.mouse</code
				>.
			</p>

			<Code
				id="mousePosition"
				slot="code"
				code={`
                /**
                 * Always keep the mouse position updated,
                 * even while outside the canvas bounds.
                 */
                window.addEventListener('mousemove', e => {
                  // normalized to 0-1
                  ps.setMousePosition(e)

                  // or, raw dogged
                  ps.mouse = {
                    x: e.clientX
                    y: e.clientY
                  }
                })
                `}
			/>
		</section>

		<section>
			<h3 id="mouse-smoothing"><a href="/#mouse-smoothing">Mouse Smoothing</a></h3>
			<p>
				<code>mouseSmoothing</code> can be passed in as an option, and/or updated on an instance.
			</p>
			<p>It ranges from 0-1, where 0 is no smoothing, and 1 is infinite smoothing.</p>

			<MouseSmoothing id="#codeblock10" client:idle smoothing={0.95}>
				<Code
					id="codeblock10"
					slot="code"
					fontSize="0.8rem"
					code={`const ps = new PocketShader('#codeblock10', {
                  mouseSmoothing: 0.8, // [!code highlight]
                  fragment: ${'`'}...${'`'}
                })

                ps.mouseSmoothing = 0.95 // [!code highlight]
                `}
				/>
			</MouseSmoothing>
		</section>
	</div>

	<style>
		.page {
			display: flex;
			flex-direction: column;
			gap: 5rem;
		}

		.note {
			box-sizing: border-box;
			position: relative;

			max-width: 26rem;
			padding: 1rem;

			font-size: var(--font-xs);

			background: rgba(136, 158, 186, 0.05);
			border-radius: var(--radius);
			outline: 1px solid rgba(136, 148, 186, 0.5);
			opacity: 0.75;
			transition: opacity 0.2s;

			&:hover {
				opacity: 1;
			}

			&::before {
				content: 'ⓘ';
				position: absolute;
				left: 0.5rem;
				bottom: 0.2rem;

				color: rgba(136, 148, 186, 0.5);

				font-size: 1.5rem;
			}
		}

		:global(#codeblock3-3 pre.astro-code) {
			&:not(:first-of-type) {
				margin-top: 0;
			}
			&:not(:last-of-type) {
				margin-bottom: 0;
			}
		}
	</style>
</Layout>
