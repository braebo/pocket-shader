---
import Importing from '../components/sections/Importing.svelte'
import HeroSection from '../components/HeroSection.svelte'
import Layout from '../layouts/Layout.astro'
import Code from '../components/Code.astro'

import Playback from '../components/sections/Playback.svelte'
import Uniforms from '../components/sections/Uniforms.svelte'
import Speed from '../components/sections/Speed.svelte'
import Dpr from '../components/sections/Dpr.svelte'
---

<script>
	import { fadeText } from '../utils/animations.ts'
	import kirby from '../shaders/kirby.frag?raw'
	import { PocketShader } from 'pocket-shader'
	import { dedent } from '../utils/dedent.ts'

	let ps1: PocketShader | null = null
	document.querySelector('#run1')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			fadeText(target, 'Dispose')
			ps1 = new PocketShader()
		} else {
			target.classList.remove('active')
			ps1?.dispose()
			ps1 = null
			fadeText(target, 'Run')
		}
	})

	let ps2: PocketShader | null = null
	document.querySelector('#run2')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			fadeText(target, 'Dispose')
			ps2 = new PocketShader('#codeblock2')
		} else {
			target.classList.remove('active')
			ps2?.dispose()
			ps2 = null
			fadeText(target, 'Run')
		}
	})

	let ps3: PocketShader | null = null
	document.querySelector('#run3')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		target.classList.toggle('active')
		if (target.textContent === 'Run') {
			fadeText(target, 'Dispose')
			ps3 = new PocketShader('#codeblock3', {
				autoStart: true,
				fragment: `
                    uniform float u_time;
                    uniform vec2 u_resolution;

                    out vec4 fragColor;

                    void main() {
                        float d = distance(fragColor.xy, u_resolution.xy / 2.0);
                        float a = atan(fragColor.y - u_resolution.y / 2.0, fragColor.x - u_resolution.x / 2.0);
                        fragColor = vec4(
                            0.5 + 0.5 * cos(u_time + a) + 0.5 * sin(d / 10.0),
                            0.5 + 0.5 * sin(u_time + a) + 0.5 * cos(d / 10.0),
                            0.5 + 0.5 * cos(u_time + a) + 0.5 * cos(d / 10.0),
                            1.0
                        );
                    }
                `,
			})
		} else {
			fadeText(target, 'Run')
			ps3?.dispose()
			ps3 = null
		}
	})

	let ps4: PocketShader | null = null
	document.querySelector('#run4')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		target.classList.toggle('active')
		if (target.textContent === 'Run') {
			if (ps4?.state !== 'disposed') {
				fadeText(target, 'Dispose')
				ps4 ||= new PocketShader('#codeblock3-3', {
					autoStart: true,
					fragment: dedent(`
                    uniform float u_time;
                    uniform vec2 u_mouse;
                    uniform vec2 u_resolution;
                    in vec2 vUv;
                    out vec4 color;
                    void main() {
                      vec2 p = vUv - 0.5;
                      vec2 m = u_mouse - 0.5;
                      float angle = atan(p.y, p.x) - atan(m.y, m.x);
                      color = vec4(0.5 + 0.5 * cos(angle), m.x + 0.5, m.y + 0.5, 1.0);
                    }
                `),
				})
			}
		} else {
			fadeText(target, 'Run')
			ps4?.dispose()
			ps4 = null
		}
	})

	let ps5: PocketShader | null = null
	document.querySelector('#run5')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			fadeText(target, 'Dispose')
			ps5 = new PocketShader('#codeblock5', {
				speed: 2,
				autoStart: true,
			})
		} else {
			target.classList.remove('active')
			ps5?.dispose()
			ps5 = null
			target.textContent = 'Run'
		}
	})

	let ps10: PocketShader | null = null
	document.querySelector('#run10')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			fadeText(target, 'Dispose')
			ps10 = new PocketShader('#codeblock10', {
				speed: 2,
				autoStart: true,
				uniforms: {
					u_jump: { type: 'float', value: 0 },
				},
				fragment: kirby,
			})

			ps10.on('render', ({ time }) => {
				if (ps10 && ps10.state !== 'disposed') {
					ps10.uniforms.u_jump.value = Math.sin(time * 2) / 5
				}
			})
		} else {
			target.classList.remove('active')
			ps10?.dispose()
			ps10 = null
			target.textContent = 'Run'
		}
	})
</script>

<Layout title="pocket-shader">
	<div class="page">

		<HeroSection client:load />

		<!-- <div style="height:10rem;"></div> -->
	</main>

	<!-- <ul class="toc">
        <li class="toc-item">
            <a href="#usage">Usage</a>
        </li>
        <li class="toc-item">
            <a href="#usage">ShaderToy</a>
        </li>
    </ul> -->

	<h2 id="usage">Usage</h2>

	<section>
		<p>
			By default, <code>PocketShader</code> will create a fullscreen canvas element and append
			it to the body.
		</p>

		<Code
			id="ps1"
			code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader()
            `}
		/>

		<button class="btn" id="run1">Run</button>
	</section>

	<section>
		<p>To render to a specific container, pass an element or selector.</p>

		<Code
			id="codeblock2"
			code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader('#codeblock2')
            `}
		/>

		<button class="btn" id="run2">Run</button>
	</section>

	<section style="max-width: 30rem;">
		<p>
			Shaders can be passed into the <code>fragment</code> and/or
			<code>vertex</code> options.
		</p>

		<Code
			id="codeblock3-3"
			code=""
			fontSize="0.8rem"
			code={`new PocketShader('#codeblock3', { // [!code highlight]
              vertex: ${'`'} // [!code highlight]
                // The default vertex shader if none is provided. // [!code highlight]
                in vec4 a_position;
                out vec2 vUv;
                void main() {
                  vUv = a_position.xy;
                  gl_Position = a_position;
                } // [!code highlight]
              ${'`'},
              fragment: ${'`'} // [!code highlight]
                // These 3 uniforms are always available. // [!code highlight]
                uniform float u_time;
                uniform vec2 u_mouse;
                uniform vec2 u_resolution;
                
                in vec2 vUv;
                out vec4 color;
                
                void main() {
                  vec2 p = vUv - 0.5;
                  vec2 m = u_mouse - 0.5;
                  float angle = atan(p.y, p.x) - atan(m.y, m.x);
                  color = vec4(0.5 + 0.5 * cos(angle), m.x + 0.5, m.y + 0.5, 1.0);
                }
              ${'`'}
            })`}
		/>

		<button class="btn" id="run4">Run</button>
	</section>

	<Importing client:load id="#codeblock4">
		<Code
			slot="code4"
			id="codeblock4"
			code={/*glsl*/ `
                    import { PocketShader } from 'pocket-shader'
                    import myShader from './clouds.glsl?raw' // [!code highlight]

                    new PocketShader('#codeblock4', {
                        autoStart: true,
                        fragment: myShader // [!code highlight]
                    })
                `}
		/>
	</Importing>

	<h2 id="animation">Animation</h2>

	<section>
		<p>The <code>autoStart</code> option will automatically start an animation loop.</p>

		<Code
			id="codeblock5"
			code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader('#codeblock5', {
                    autoStart: true // [!code highlight]
                })
            `}
		/>

		<button class="btn" id="run5">Run</button>
	</section>

	<section>
		<p>
			The animation loop can be controlled with methods like <code>start()</code>
			and <code>stop()</code>.
		</p>
		<Playback client:load id="#codeblock6">
			<Code
				slot="code"
				id="codeblock6"
				code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                const ps = new PocketShader('#codeblock6')
              
                ps.start() // [!code highlight]
            `}
			/>
		</Playback>
		<!-- <p>
            <em>
                Notice that calling <code>stop()</code> resets <code>time</code> to <code>0</code>.
            </em>
        </p> -->
	</section>

	<section>
		<p>
			The <code>speed</code> can be passed as an option, or adjusted freely on each instance.
		</p>

		<Speed speed={2} id="#codeblock7" client:idle>
			<Code
				id="codeblock7"
				slot="code"
				code={/*js*/ `
                    import { PocketShader } from 'pocket-shader'

                    new PocketShader('#codeblock7', {
                        autoStart: true,
                        speed: 2 // [!code highlight]
                    })
                `}
			/>
		</Speed>
	</section>

	<section>
		<p>
			The <code>maxPixelRatio</code> will limit the pixel ratio of the canvas, which is determined
			by the device's pixel ratio by default.
		</p>

		<p>
			Lowering this can increse performance significantly depending on the size of the canvas
			/ DPI of the screen.
		</p>

		<Dpr dpr={0.1} id="#codeblock8" client:idle>
			<Code
				id="codeblock8"
				slot="code"
				code={/*js*/ `
                    import myShader from './dyingUniverse.glsl?raw'
                    import { PocketShader } from 'pocket-shader'

                    new PocketShader('#codeblock8', {
                        fragment: myShader,
                        maxPixelRatio: 2 // [!code highlight]
                        autoStart: true,
                    })
                `}
			/>
		</Dpr>
	</section>

	<h2 id="uniforms">Uniforms</h2>

	<section>
		<p>
			The <code>uniforms</code> option allows you to specify custom uniforms. They can be accessed
			anytime with <code>ps.uniforms</code>, and will auto-update in the shader when changed.
		</p>

		<Uniforms id="#codeblock9" client:idle>
			<Code
				id="codeblock9"
				slot="code"
				code={/*js*/ `
                    import { PocketShader } from 'pocket-shader'
                    import myShader from './clouds.glsl?raw'

                    const ps = new PocketShader('#codeblock9', {
                        fragment: myShader,
                        autoStart: true,
                        uniforms: { // [!code highlight]
                            octave: { type: 'int',   value: 3 }, // [!code highlight]
                            zoom:   { type: 'float', value: 0 }, // [!code highlight]
                            sphere: { type: 'float', value: 1 }, // [!code highlight]
                            // etc... // [!code highlight]
                        } // [!code highlight]
                    })

                    ps.uniforms.octave = 4 // [!code highlight]
                    ps.uniforms.zoom = 1 // [!code highlight]
                `}
			/>
		</Uniforms>

		<br />

		<p class="note" style="text-wrap: pretty">
			For now, <code>uniforms</code> must be <code>&#123;type,value&#125;</code> objects.&nbsp;&nbsp;In
			the future, it will accept primitive values and infer the <code>type</code> internally.
			<br /><em>(just ran out of time for now...)</em>
		</p>
	</section>

	<section>
		<h2 id="events">Events</h2>

		<p>
			The <code>on</code> method allows you to listen for the <code>'render'</code> event, which
			fires before each frame. This is useful for updating uniforms or other properties before
			the frame is drawn.
		</p>

		<Code
			id="codeblock10"
			fontSize="0.75rem"
			code={/*js*/ `
                import { PocketShader } from 'pocket-shader'
                import fragment from './kirby.frag?raw'

                const ps = new PocketShader('#codeblock10', {
                    fragment,
                    autoStart: true,
                    uniforms: { // [!code highlight]
                        u_jump: { type: 'float', value: 0 } // [!code highlight]
                    }, // [!code highlight]
                })

                ps.on('render', ({ time }) => { // [!code highlight]
                    ps.uniforms.u_jump.value = Math.sin(time) // [!code highlight]
                }) // [!code highlight]
            `}
		/>

		<button class="btn" id="run10">Run</button>

	</div>

	<style>
		.page {
			display: flex;
			flex-direction: column;
			gap: 5rem;
		}

		.note {
			position: relative;

			padding: 1rem;

			background: rgba(136, 158, 186, 0.05);
			border-radius: var(--radius);
			outline: 1px solid rgba(136, 148, 186, 0.5);
			opacity: 0.75;
			transition: opacity 0.2s;

			&:hover {
				opacity: 1;
			}

			&::before {
				content: 'ⓘ';
				position: absolute;
				left: 0.5rem;
				bottom: 0.2rem;

				color: rgba(136, 148, 186, 0.5);

				font-size: 1.5rem;
				/* font-weight: bold; */
			}
		}

		:global(#codeblock3-3 pre.astro-code) {
			&:not(:first-of-type) {
				margin-top: 0;
			}
			&:not(:last-of-type) {
				margin-bottom: 0;
			}
		}
	</style>
</Layout>
