---
import Importing from '../components/sections/Importing.svelte'
import HeroText from '../components/HeroSection.astro'
import Layout from '../layouts/Layout.astro'
import Code from '../components/Code.astro'

import Playback from '../components/sections/Playback.svelte'
import Speed from '../components/sections/Speed.svelte'
import Dpr from '../components/sections/Dpr.svelte'
---

<script>
	import { PocketShader } from 'pocket-shader'
import { fadeText } from '../utils/animations.ts'

	let ps1: PocketShader | null = null
	document.querySelector('#run1')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			// target.textContent = 'Dispose'
			fadeText(target, 'Dispose')
			ps1 = new PocketShader()
		} else {
			target.classList.remove('active')
			ps1?.dispose()
			ps1 = null
			// target.textContent = 'Run'
			fadeText(target, 'Run')
		}
	})

	let ps2: PocketShader | null = null
	document.querySelector('#run2')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			// target.textContent = 'Dispose'
			fadeText(target, 'Dispose')
			ps2 = new PocketShader('#codeblock2')
		} else {
			target.classList.remove('active')
			ps2?.dispose()
			ps2 = null
			// target.textContent = 'Run'
			fadeText(target, 'Run')
		}
	})

	let ps3: PocketShader | null = null
	document.querySelector('#run3')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		target.classList.toggle('active')
		if (target.textContent === 'Run') {
			fadeText(target, 'Dispose')
			// target.textContent = 'Dispose'
			ps3 = new PocketShader('#codeblock3', {
				autoStart: true,
				fragmentShader: `
                    precision mediump float;

                    uniform float time;
                    uniform vec2 resolution;

                    void main() {
                        float d = distance(gl_FragCoord.xy, resolution.xy / 2.0);
                        float a = atan(gl_FragCoord.y - resolution.y / 2.0, gl_FragCoord.x - resolution.x / 2.0);
                        gl_FragColor = vec4(
                            0.5 + 0.5 * cos(time + a) + 0.5 * sin(d / 10.0),
                            0.5 + 0.5 * sin(time + a) + 0.5 * cos(d / 10.0),
                            0.5 + 0.5 * cos(time + a) + 0.5 * cos(d / 10.0),
                            1.0
                        );
                    }
                `,
			})
		} else {
			fadeText(target, 'Run')
			// target.textContent = 'Run'
			ps3?.dispose()
			ps3 = null
		}
	})

	let ps5: PocketShader | null = null
	document.querySelector('#run5')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			fadeText(target, 'Dispose')
			ps5 = new PocketShader('#codeblock5', {
				speed: 2,
				autoStart: true,
			})
		} else {
			target.classList.remove('active')
			ps5?.dispose()
			ps5 = null
			target.textContent = 'Run'
		}
	})
</script>

<Layout title="pocket-shader">
	<main>
		<br />

		<HeroText />

		<br-xl></br-xl>

		<p class="description gradient-outline" style="position:relative">
			<code class="text-gradient">pocket-shader</code> is a typescript package that makes it easy
			to render WebGL shaders.
		</p>
	</main>

	<!-- <ul class="toc">
        <li class="toc-item">
            <a href="#usage">Usage</a>
        </li>
        <li class="toc-item">
            <a href="#usage">ShaderToy</a>
        </li>
    </ul> -->

	<h2 id="usage">Usage</h2>

	<section>
		<p>
			By default, <code>PocketShader</code> will create a fullscreen canvas element and append
			it to the body.
		</p>

		<Code
			id="eg1"
			code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader()
            `}
		/>

		<button class="btn" id="run1">Run</button>
	</section>

	<section>
		<p>To render to a specific container, pass an element or selector.</p>

		<Code
			id="codeblock2"
			code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader('#codeblock2')
            `}
		/>

		<button class="btn" id="run2">Run</button>
	</section>

	<section style="max-width: 30rem;">
		<p>
			Shaders can be passed into the options <code>fragmentShader</code> and/or
			<code>vertexShader</code>.
		</p>

		<!-- <p>
			Given a string, like <code>myShader</code> below.
		</p> -->

		<Code
			lang="glsl"
			id="codeblock3"
			fontSize="0.7rem"
			lineHeight="1.15rem"
			code={/*glsl*/ `
                const myShader = \`
                    precision mediump float;    
                    uniform float time; // built-in time uniform
                    uniform vec2 resolution; // built-in resolution uniform
                    void main() {
                        float d = distance(gl_FragCoord.xy, resolution.xy / 2.0);
                        float a = atan(gl_FragCoord.y - resolution.y / 2.0, gl_FragCoord.x - resolution.x / 2.0);
                        gl_FragColor = vec4(
                            0.5 + 0.5 * cos(time + a) + 0.5 * sin(d / 10.0),
                            0.5 + 0.5 * sin(time + a) + 0.5 * cos(d / 10.0),
                            0.5 + 0.5 * cos(time + a) + 0.5 * cos(d / 10.0),
                            1.0
                        );
                    }
                \`
            `}
		/>

		<p>
			We can pass a string, like <code>myShader</code> above, directly into the
			<code>fragmentShader</code> option.
		</p>

		<Code
			id="codeblock3-2"
			code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader('#codeblock3', {
                    autoStart: true,
                    fragmentShader: myShader // [!code highlight]
                })
            `}
		/>

		<button class="btn" id="run3">Run</button>
	</section>

	<Importing client:load id="#codeblock4">
		<Code
			slot="code4"
			id="codeblock4"
			code={/*glsl*/ `
                    import { PocketShader } from 'pocket-shader'
                    import myShader from './clouds.glsl?raw' // [!code highlight]

                    new PocketShader('#codeblock4', {
                        autoStart: true,
                        fragmentShader: myShader // [!code highlight]
                    })
			    `}
		/>
	</Importing>

	<h2 id="animation">Animation</h2>

	<section>
		<p>The <code>autoStart</code> option will automatically start an animation loop.</p>

		<Code
			id="codeblock5"
			code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                new PocketShader('#codeblock5', {
                    autoStart: true // [!code highlight]
                })
            `}
		/>

		<button class="btn" id="run5">Run</button>
	</section>

	<section>
		<p>
			The animation loop can be controlled with methods like <code>start()</code>
			and <code>stop()</code>.
		</p>
		<Playback client:load id="#codeblock6">
			<Code
				slot="code"
				id="codeblock6"
				code={/*js*/ `
                import { PocketShader } from 'pocket-shader'

                const ps = new PocketShader('#codeblock6')
            `}
			/>
		</Playback>
		<!-- <p>
			<em>
				Notice that calling <code>stop()</code> resets <code>time</code> to <code>0</code>.
			</em>
		</p> -->
	</section>

	<section>
		<p>
			The <code>speed</code> can be passed as an option, or adjusted freely on each instance.
		</p>

		<Speed speed={2} id="#codeblock7" client:idle>
			<Code
				id="codeblock7"
				slot="code"
				code={/*js*/ `
                    import { PocketShader } from 'pocket-shader'

                    new PocketShader('#codeblock7', {
                        autoStart: true,
                        speed: 2 // [!code highlight]
                    })
                `}
			/>
		</Speed>
	</section>

	<section>
		<p>
			The <code>maxPixelRatio</code> will limit the pixel ratio of the canvas, which is determined
			by the device's pixel ratio by default.
		</p>

		<p>
			Lowering this can increse performance significantly depending on the size of the canvas
			/ DPI of the screen.
		</p>

		<Dpr dpr={0.1} id="#codeblock8" client:idle>
			<Code
				id="codeblock8"
				slot="code"
				code={/*js*/ `
                    import myShader from './dyingUniverse.glsl?raw'
                    import { PocketShader } from 'pocket-shader'

                    new PocketShader('#codeblock8', {
                        fragmentShader: myShader,
                        maxPixelRatio: 2 // [!code highlight]
                        autoStart: true,
                    })
                `}
			/>
		</Dpr>
	</section>

	<br />
</Layout>

<style>
	.description {
		box-sizing: border-box;
		padding: 1rem;

		outline: var(--outline);
		background: var(--bg-a);
		border-radius: var(--radius);

		text-wrap: balance;
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
