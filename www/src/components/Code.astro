---
// import type { ThemeInput } from 'shiki'
import { Code as AstroCode } from 'astro:components'
import { dedent } from '../utils/dedent.ts'
import Copy from './Copy.svelte'
import {
	transformerNotationHighlight,
	transformerNotationFocus,
	transformerNotationDiff,
} from '@shikijs/transformers'

interface Props {
	id: string
	code: string
	codes?: { lang: string, code: string, trim?: boolean }[]
	lang?: string
	fontSize?: string
	lineHeight?: string
}

const {
	id,
	code,
	codes = [],
	lang = 'ts',
	fontSize = 'var(--font-sm)',
	lineHeight = 'var(--ling-height-sm)',
} = Astro.props




---

<div class="code-container" id={id}>
	<div class="code-padding"></div>
	
	<div class="code-container-inner" style=`font-size:${fontSize};line-height:${lineHeight}`>
		<div class="copy-button-container">
			<Copy text={code} client:load />
		</div>

		{codes.length ? (
				codes.map(({lang, code, trim = true}, i) => (
					<!-- @ts-ignore -->
					<AstroCode
						lang={lang}
						theme="poimandres"
						transformers={[
							transformerNotationFocus(),
							transformerNotationDiff(),
							transformerNotationHighlight(),
						]}
						code={trim ? dedent(code) : code}
					/>
				))
		) : (
				<!-- @ts-ignore -->
				<AstroCode
					lang={lang}
					theme="poimandres"
					transformers={[
						transformerNotationFocus(),
						transformerNotationDiff(),
						transformerNotationHighlight(),
					]}
					code={dedent(code)}
				/>
		)
		}
	</div>
	<div class="code-padding"></div>
</div>

<style is:global>
	.astro-code {
		background-color: transparent !important;
	}
	div.code-container {
		--bg: #1b1e28;

		position: relative;
		display: flex;

		width: fit-content;
		max-width: 100%;
		margin: auto;

		overflow-x: auto;

		background-color: var(--bg);
		border-radius: var(--radius);

		box-shadow:
			0 4px 3px #0005 inset,
			0 2px 5px #0005 inset,
			0 1px 9px #0009 inset,
			0 0px 15px #0006 inset;
		outline: 2px solid #3f3f3f33;

		font-family: var(--font-mono);
		font-size: var(--font-sm);
		font-variation-settings: 'wght' 200;
		line-height: var(--line-height-sm);

		div.code-container-inner {
		}
	}
	.code-padding {
		min-width: 1rem;
		min-height: 100%;
		background-color: var(--bg);
		z-index: -1;
	}

	.code-container-inner {
		z-index: 0;
	}

	.has-focused .line {
		filter: blur(0.095rem);
	}
	.has-focused .focused {
		filter: blur(0);
	}

	.has-highlighted .line {
		opacity: 0.75;
		filter: brightness(0.7) saturate(0.7) contrast(0.9);
	}
	.has-highlighted .highlighted {
		opacity: 1;
		filter: brightness(1.2) saturate(1.2) contrast(1.1);
	}

	pre.astro-code code {
		position: relative;

		width: fit-content;

		overflow: visible;
	}

	.copy-button-container {
		position: absolute;
		right: 0;
		top: 0;
		z-index: 1;
		transform: scale(0.01) translate3d(0, 0, 1px);
		transition: 0.2s;
	}

	div.code-container:hover .copy-button-container {
		transition: 0.2s;
		transform: scale(1) translate3d(0, 0, 1px);
	}

	code,
	pre {
		overflow: visible;
	}
</style>
