---
// import type { ThemeInput } from 'shiki'
import {
	transformerNotationHighlight,
	transformerNotationFocus,
	transformerNotationDiff,
} from '@shikijs/transformers'
import { Code as AstroCode } from 'astro:components'
import { dedent } from '../utils/dedent.ts'
import Copy from './Copy.svelte'

// const theme = Object.freeze({
// 	name: 'serendipity',
// 	displayName: 'Serendipity Midnight',
// 	type: 'dark',
// 	bg: '#0000',
// 	fg: '#d4d4d4',
// 	settings: [
// 		{
// 			name: 'Global settings',
// 			settings: {
// 				background: '#15161d',
// 				foreground: '#777d8f',
// 			},
// 		},
// 		{
// 			scope: ['comment'],
// 			settings: {
// 				foreground: '#6B6D7C',
// 				fontStyle: 'italic',
// 			},
// 		},
// 		{
// 			scope: ['constant'],
// 			settings: {
// 				foreground: '#5ba2d0',
// 			},
// 		},
// 		{
// 			scope: ['constant.numeric', 'constant.language', 'constant.charcter.escape'],
// 			settings: {
// 				foreground: '#F8D2C9',
// 			},
// 		},
// 		{
// 			scope: ['entity.name'],
// 			settings: {
// 				foreground: '#F8D2C9',
// 			},
// 		},
// 		{
// 			scope: [
// 				'entity.name.section',
// 				'entity.name.tag',
// 				'entity.name.namespace',
// 				'entity.name.type',
// 			],
// 			settings: {
// 				foreground: '#94b8ff',
// 			},
// 		},
// 		{
// 			scope: ['entity.other.attribute-name', 'entity.other.inherited-class'],
// 			settings: {
// 				foreground: '#9ccfd8',
// 				fontStyle: 'italic',
// 			},
// 		},
// 		{
// 			scope: ['invalid'],
// 			settings: {
// 				foreground: '#ee8679',
// 			},
// 		},
// 		{
// 			scope: ['invalid.deprecated'],
// 			settings: {
// 				foreground: '#8D8F9E',
// 			},
// 		},
// 		{
// 			scope: ['keyword'],
// 			settings: {
// 				foreground: '#5ba2d0',
// 			},
// 		},
// 		{
// 			scope: ['meta.tag', 'meta.brace'],
// 			settings: {
// 				foreground: '#DEE0EF',
// 			},
// 		},
// 		{
// 			scope: ['meta.import', 'meta.export'],
// 			settings: {
// 				foreground: '#5ba2d0',
// 			},
// 		},
// 		{
// 			scope: 'meta.directive.vue',
// 			settings: {
// 				foreground: '#9ccfd8',
// 				fontStyle: 'italic',
// 			},
// 		},
// 		{
// 			scope: 'meta.property-name.css',
// 			settings: {
// 				foreground: '#94b8ff',
// 			},
// 		},
// 		{
// 			scope: 'meta.property-value.css',
// 			settings: {
// 				foreground: '#a78bfa',
// 			},
// 		},
// 		{
// 			scope: 'meta.tag.other.html',
// 			settings: {
// 				foreground: '#8D8F9E',
// 			},
// 		},
// 		{
// 			scope: ['punctuation'],
// 			settings: {
// 				foreground: '#8D8F9E',
// 			},
// 		},
// 		{
// 			scope: ['punctuation.accessor'],
// 			settings: {
// 				foreground: '#5ba2d0',
// 			},
// 		},
// 		{
// 			scope: ['punctuation.definition.string'],
// 			settings: {
// 				foreground: '#a78bfa',
// 			},
// 		},
// 		{
// 			scope: ['punctuation.definition.tag'],
// 			settings: {
// 				foreground: '#6B6D7C',
// 			},
// 		},
// 		{
// 			scope: ['storage.type', 'storage.modifier'],
// 			settings: {
// 				foreground: '#5ba2d0',
// 			},
// 		},
// 		{
// 			scope: ['string'],
// 			settings: {
// 				foreground: '#a78bfa',
// 			},
// 		},
// 		{
// 			scope: ['support'],
// 			settings: {
// 				// "foreground": "#94b8ff"
// 				// "foreground": "#ffcc8b"
// 				foreground: '#F8D2C9',
// 			},
// 		},
// 		{
// 			scope: ['support.constant'],
// 			settings: {
// 				foreground: '#a78bfa',
// 			},
// 		},
// 		{
// 			scope: ['support.function'],
// 			settings: {
// 				foreground: '#ee8679',
// 				fontStyle: 'italic',
// 			},
// 		},
// 		{
// 			scope: ['variable'],
// 			settings: {
// 				foreground: '#F8D2C9',
// 				// "fontStyle": "italic"
// 			},
// 		},
// 		{
// 			scope: [
// 				'variable.other',
// 				'variable.language',
// 				'variable.function',
// 				'variable.argument',
// 			],
// 			settings: {
// 				foreground: '#DEE0EF',
// 			},
// 		},
// 		{
// 			scope: ['variable.parameter'],
// 			settings: {
// 				foreground: '#9ccfd8',
// 			},
// 		},
// 	],
// }) satisfies ThemeInput

interface Props {
	id: string
	code: string
	lang?: string
	fontSize?: string
	lineHeight?: string
}

const {
	id,
	code,
	lang = 'ts',
	fontSize = 'var(--font-sm)',
	lineHeight = 'var(--ling-height-sm)',
} = Astro.props
---

<div class="code-container" id={id}>
	<div class="code-padding"></div>
	<div class="code-container-inner" style=`font-size:${fontSize};line-height:${lineHeight}`>
		<div class="copy-button-container">
			<Copy text={code} client:load />
		</div>
		<!-- theme={theme} -->
		<!-- @ts-ignore -->
		<AstroCode
			lang={lang}
			theme="poimandres"
			transformers={[
				transformerNotationFocus(),
				transformerNotationDiff(),
				transformerNotationHighlight(),
			]}
			code={dedent(code)}
		/>
	</div>
	<div class="code-padding"></div>
</div>

<style is:global>
	.astro-code {
		background-color: transparent !important;
	}
	div.code-container {
		--bg: #1b1e28;

		position: relative;
		display: flex;

		width: fit-content;
		max-width: 100%;
		margin: auto;

		overflow-x: auto;

		background-color: var(--bg);
		border-radius: var(--radius);

		box-shadow:
			0 4px 3px #0005 inset,
			0 2px 5px #0005 inset,
			0 1px 9px #0009 inset,
			0 0px 15px #0006 inset;
		outline: 2px solid #3f3f3f33;

		font-family: var(--font-mono);
		font-size: var(--font-sm);
		font-variation-settings: 'wght' 200;
		line-height: var(--line-height-sm);

		div.code-container-inner {
		}
	}
	.code-padding {
		min-width: 1rem;
		min-height: 100%;
		background-color: var(--bg);
		z-index: -1;
	}

	.code-container-inner {
		z-index: 0;
	}

	.has-focused .line {
		filter: blur(0.095rem);
	}
	.has-focused .focused {
		filter: blur(0);
	}

	.has-highlighted .line {
		opacity: 0.75;
		filter: brightness(0.7) saturate(0.7) contrast(0.9);
	}
	.has-highlighted .highlighted {
		opacity: 1;
		filter: brightness(1.2) saturate(1.2) contrast(1.1);
	}

	pre.astro-code code {
		position: relative;

		width: fit-content;

		overflow: visible;
	}

	.copy-button-container {
		position: absolute;
		right: 0;
		top: 0;
		z-index: 1;
		transform: scale(0.01) translate3d(0, 0, 1px);
		transition: 0.2s;
	}

	div.code-container:hover .copy-button-container {
		transition: 0.2s;
		transform: scale(1) translate3d(0, 0, 1px);
	}

	code,
	pre {
		overflow: visible;
	}
</style>
