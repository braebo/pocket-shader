---
import { createCssVariablesTheme, type BuiltinLanguage } from 'shiki'
import { Code as AstroCode } from 'astro:components'
import { dedent } from '../utils/dedent.ts'
import { nanoid } from '../utils/nanoid'
import Copy from './Copy.svelte'
import {
	transformerNotationWordHighlight,
	transformerNotationHighlight,
	transformerNotationFocus,
	transformerNotationDiff,
} from '@shikijs/transformers'

interface Props {
	id: string
	code: string
	codes?: { lang: string, code: string, trim?: boolean }[]
	lang?: string
	fontSize?: string
	lineHeight?: string
	title?: string
	width?: string
}

const {
	id,
	code,
	codes = [],
	lang = 'ts',
	fontSize = 'var(--font-sm)',
	lineHeight = 'var(--ling-height-sm)',
	title = '',
	width = '',
} = Astro.props

const theme = createCssVariablesTheme({
	name: 'pocket-shader',
	fontStyle: true
})

const copyId = 'copyId-' + nanoid(8)
---

<div class="outer">
	{title && <label>{title}</label>}

	<div class="code-container" id={id}>
		<div class="code-padding"></div>

		<div class="inner" id={copyId} style=`font-size:${fontSize};line-height:${lineHeight}`>
			<div class="copy-button-container">
				<Copy id={copyId} client:load />
			</div>

			{codes.length ? (
					codes.map(({lang, code, trim = false}) => (
						<AstroCode
							lang={lang as BuiltinLanguage}
							theme={theme}
							transformers={[
								transformerNotationFocus(),
								transformerNotationDiff(),
								transformerNotationHighlight(),
								transformerNotationWordHighlight(),
							]}
							code={trim ? dedent(code) : code}
						/>
					))
			) : (
					<AstroCode
						lang={lang as BuiltinLanguage}
						theme={theme}
						transformers={[
							transformerNotationFocus(),
							transformerNotationDiff(),
							transformerNotationHighlight(),
							transformerNotationWordHighlight()
						]}
						
						code={dedent(code)}
					/>
			)
			}
		</div>
		<div class="code-padding"></div>
	</div>
</div>

<style define:vars={{ width }}>
	.outer {
		position: relative;
		width: var(--width, fit-content);
		max-width: 100%;
		margin: auto;
	}
	
	div.code-container {
		--bg: #1b1e28;

		position: relative;
		display: flex;

		max-width: 100%;
		margin: auto;

		overflow-x: auto;

		background-color: var(--bg);
		border-radius: var(--radius);

		box-shadow:
			0 4px 3px #0005 inset,
			0 2px 5px #0005 inset,
			0 1px 9px #0009 inset,
			0 0px 15px #0006 inset;
		outline: 2px solid #3f3f3f33;

		font-family: var(--font-mono);
		font-size: var(--font-sm);
		font-variation-settings: 'wght' 200;
		line-height: var(--line-height-sm);
	}
	
	.outer:has(label) {
		margin-top: 1rem;
		.code-container {
			border-top-left-radius: 0;
		}
	}
	
	.code-padding {
		min-width: 1rem;
		min-height: 100%;
		background-color: var(--bg);
		z-index: -1;
	}

	.inner {
		z-index: 0;
	}

	.copy-button-container {
		position: absolute;
		right: 0;
		top: 0;
		z-index: 1;
		transform: scale(0.01) translate3d(0, 0, 1px);
		transition: 0.2s;
	}

	div.code-container:hover .copy-button-container {
		transition: 0.2s;
		transform: scale(1) translate3d(0, 0, 1px);
	}

	label {
		position: absolute;
		top: -1.5rem;
		background: #11131a;
		color: var(--fg-d);
		color: #707887;
		padding: 0.25rem 0.75rem;
		font-size: 0.8rem;
		font-variation-settings: 'wght' 100;
		font-family: var(--font-mono);
		border-radius: 0.25rem;
		border-bottom-left-radius: 0;
		border-bottom-right-radius: 0;
	}
</style>
