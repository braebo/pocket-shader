---
import HeroText from '../components/HeroSection.astro'
import Card from '../components/Shaders.astro'
import Layout from '../layouts/Layout.astro'
import Code from '../components/Code.astro'

import Playback from '../components/sections/Playback.svelte'
---

<script>
	import { PocketShader } from 'pocket-shader'

	let ps1: PocketShader | null = null
	document.querySelector('#run1')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			target.textContent = 'Dispose'
			ps1 = new PocketShader()
		} else {
			target.classList.remove('active')
			ps1?.dispose()
			ps1 = null
			target.textContent = 'Run'
		}
	})

	let ps2: PocketShader | null = null
	document.querySelector('#run2')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			target.textContent = 'Dispose'
			ps2 = new PocketShader('#codeblock2')
		} else {
			target.classList.remove('active')
			ps2?.dispose()
			ps2 = null
			target.textContent = 'Run'
		}
	})

	let ps3: PocketShader | null = null
	document.querySelector('#run3')?.addEventListener('click', e => {
		const target = e.target as HTMLButtonElement
		if (target.textContent === 'Run') {
			target.classList.add('active')
			target.textContent = 'Dispose'
			ps3 = new PocketShader('#codeblock3', {
				autoStart: true,
			})
		} else {
			target.classList.remove('active')
			ps3?.dispose()
			ps3 = null
			target.textContent = 'Run'
		}
	})

	// let ps4: PocketShader | null = null
	// const ps4StartBtn = document.querySelector('#start4') as HTMLButtonElement
	// function ps4Start() {
	// 	ps4?.start()
	// 	ps4StateValue.textContent = ps4?.state ?? ''
	// }
	// const ps4PauseBtn = document.querySelector('#pause4') as HTMLButtonElement
	// function ps4Pause() {
	// 	ps4?.pause()
	// 	ps4StateValue.textContent = ps4?.state ?? ''
	// }
	// const ps4StopBtn = document.querySelector('#stop4') as HTMLButtonElement
	// function ps4Stop() {
	// 	ps4?.stop()
	// 	ps4StateValue.textContent = ps4?.state ?? ''
	// }
	// const ps4StateValue = document.querySelector('#p4-state .value') as HTMLDivElement
	// const ps4TimeValue = document.querySelector('#p4-time .value') as HTMLDivElement
	// document.querySelector('#run4')?.addEventListener('click', e => {
	// 	const target = e.target as HTMLButtonElement
	// 	target.classList.toggle('active')
	// 	ps4StateValue.classList.remove('disabled')
	// 	ps4TimeValue.classList.remove('disabled')

	// 	ps4StartBtn.toggleAttribute('disabled')
	// 	ps4PauseBtn.toggleAttribute('disabled')
	// 	ps4StopBtn.toggleAttribute('disabled')

	// 	if (target.textContent === 'Run') {
	// 		target.textContent = 'Dispose'
	// 		ps4 = new PocketShader('#codeblock4', {
	// 			speed: 4,
	// 		})
	// 		ps4.on('render', ({ time }) => {
	// 			ps4TimeValue.textContent = time.toFixed(2)
	// 		})
	// 		ps4StartBtn.addEventListener('click', ps4Start)
	// 		ps4PauseBtn.addEventListener('click', ps4Pause)
	// 		ps4StopBtn.addEventListener('click', ps4Stop)
	// 		ps4StateValue.textContent = ps4.state
	// 	} else {
	// 		ps4StartBtn?.removeEventListener('start', ps4Start)
	// 		ps4PauseBtn?.removeEventListener('pause', ps4Pause)
	// 		ps4StopBtn?.removeEventListener('stop', ps4Stop)
	// 		ps4?.stop().dispose()
	// 		ps4StateValue.textContent = ps4?.state ?? ''
	// 		ps4 = null
	// 		target.textContent = 'Run'
	// 	}
	// })
</script>

<Layout title="pocket-shader">
	<main>
		<br />

		<HeroText />

		<br-xl></br-xl>

		<p class="description">
			<code class="text-gradient">pocket-shader</code> is a typescript package that makes it easy
			to render WebGL shaders.
		</p>
	</main>

	<!-- <ul class="toc">
		<li class="toc-item">
			<a href="#usage">Usage</a>
		</li>
		<li class="toc-item">
			<a href="#usage">ShaderToy</a>
		</li>
	</ul> -->

	<section>
		<h2 id="usage">Usage</h2>
		<p>
			By default, <code>PocketShader</code> will create a fullscreen canvas element and append
			it to the body.
		</p>

		<Code
			id="eg1"
			code={/*js*/ `
				import { PocketShader } from 'pocket-shader'

				new PocketShader()
			`}
		/>

		<button class="btn" id="run1">Run</button>
	</section>

	<section>
		<p>To render to a specific container, pass an element or selector.</p>

		<Code
			id="codeblock2"
			code={/*js*/ `
				import { PocketShader } from 'pocket-shader'

				new PocketShader('#codeblock2')
			`}
		/>

		<button class="btn" id="run2">Run</button>
	</section>

	<h2 id="animation">Animation</h2>

	<section>
		<p>The <code>autoStart</code> option will automatically start an animation loop.</p>

		<Code
			id="codeblock3"
			code={/*js*/ `
				import { PocketShader } from 'pocket-shader'

				new PocketShader('#codeblock3', {
				    autoStart: true // [!code highlight]
				})
			`}
		/>

		<button class="btn" id="run3">Run</button>
	</section>

	<section>
		<p>
			The animation loop can be controlled with methods like <code>start()</code>
			and <code>stop()</code>.
		</p>
		<Playback client:load>
			<Code
				slot="code"
				id="codeblock4"
				code={/*js*/ `
				import { PocketShader } from 'pocket-shader'

				const ps = new PocketShader('#codeblock4')
			`}
			/>
		</Playback>
	</section>

	<!-- <section>
		<p>
			The animation loop can be controlled with methods like <code>start()</code>
			and <code>stop()</code>.
		</p>

		<Code
			id="codeblock4"
			code={/*js*/ `
				import { PocketShader } from 'pocket-shader'

				const ps = new PocketShader('#codeblock4')
			`}
		/>

		<button class="btn" id="run4">Run</button>

		<div id="p4-state" class="kv disabled">
			<div class="key"><code>ps.state</code></div>
			<div class="value"></div>
		</div>

		<div id="p4-time" class="kv disabled">
			<div class="key"><code>ps.time</code></div>
			<div class="value"></div>
		</div>

		<div id="buttons4" class="flex">
			<button class="code gradient-outline" id="start4" disabled>ps.start()</button>
			<button class="code gradient-outline" id="pause4" disabled>ps.pause()</button>
			<button class="code gradient-outline" id="stop4" disabled>ps.stop()</button>
		</div>
	</section> -->

	<br />

	<ul role="list" class="link-card-grid">
		<Card />
	</ul>
</Layout>

<style>
	.description {
		box-sizing: border-box;
		padding: 1rem;

		outline: var(--outline);
		background: var(--bg-a);
		border-radius: var(--radius);

		text-wrap: balance;
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}

	/* .kv {
		display: flex;
		align-items: center;
		justify-content: space-between;
		width: 11rem;
		margin: auto;
		outline: var(--outline);
		border-radius: var(--radius);
		overflow: hidden;
		height: 1.75rem;

		div {
			display: flex;
			justify-content: center;
			align-items: center;
			flex: 1fr;

			line-height: 1.75rem;
		}

		.value {
			margin: auto;
		}
	}

	.flex {
		display: flex;
		gap: 1rem;
		width: fit-content;
		margin: auto;
	}

	button.code {
		color: var(--fg-a);
		font-variation-settings: 'wght' 300;
		font-size: var(--font-sm);
		position: relative;

		padding: 0.25rem 0.5rem;
	}

	.disabled,
	button:disabled {
		opacity: 0.5;
		filter: grayscale(1) brightness(0.5);
		cursor: not-allowed;

		&::before {
			display: none;
		}
	} */
</style>
